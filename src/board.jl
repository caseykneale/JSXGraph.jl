mutable struct Board
    name::String
    io::IOBuffer
    xlim::Vector{<:Real}
    ylim::Vector{<:Real}
    axis::Bool
    showcopyright::Bool
    shownavigation::Bool
end
function Board(name; opts...)
    b = Board(name, IOBuffer(),
              get(opts, :xlim, [-10.0, 10.0]),
              get(opts, :ylim, [-10.0, 10.0]),
              get(opts, :axis, false),
              get(opts, :showcopyright, false),
              get(opts, :shownavigation, false))
    ks = keys(opts)
    if :boundingbox in keys(opts)
        bb = opts.boundingbox
        @assert length(bb) == 4 "Bounding box must have 4 elements."
        b.xlim = bb[1:2]
        b.ylim = bb[[4,3]]
    end
    return b
end

"""
    board(name="brd"+randstring(5); opts...)

Create a new board, register it as the current board.

* `name` - name of the board (generated by default)
* `xlim` - x axis limits default: `[-10,10]`
* `ylim` - y axis limits default: `[-10,10]`
* `axis` - whether to show the axis ex: false
* `showcopyright` - whether to show JSX's copyright ex: true
* `shownavigation` - whether to show a navigation tool on the board ex: true

Alternative
* `boundingbox` - [xmin,xmax,ymax,ymin]
"""
function board(name="brd_"*randstring(5); opts...)
    brd = Board(name; opts...)
    set_board!(brd)
    JSX_ENV[:CURRENT_BOARD] = brd
    return brd
end

"""
    obj |> board

Adds object `obj` to board `board`.
"""
(b::Board)(obj::Object) = println(b.io, str(obj, b))

"""
    gcb()

Get the current board.
"""
gcb() = isnothing(JSX_ENV[:CURRENT_BOARD]) ? board() : ENV[:CURRENT_BOARD]


const PREAMBLE =
    "function val(x){return x.Value();}" *
    prod("function $f(x){return Math.$f(x);};"
         for f in (:abs, :acos, :acosh, :asin, :asinh,
                   :atan, :atanh, :ceil, :cos, :cosh, :exp,
                   :expm1, :floor, :hypot, :log, :log1p, :log10,
                   :log2, :max, :min, :round, :sign, :sin, :sinh,
                   :sqrt, :tan, :tanh, :trunc)) *
    "function rand(){return Math.random();};" *
    "const π = Math.PI; const ℯ = Math.E;"

"""
    set_board!(b)

Instantiates board `b`.
"""
set_board!(b::Board) = println(b.io, PREAMBLE)
