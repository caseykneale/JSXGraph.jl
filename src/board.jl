mutable struct Board
    name::String
    objects::Vector{Object}
    # --- board options ---
    xlim::Vector{<:Real}
    ylim::Vector{<:Real}
    axis::Bool
    showcopyright::Bool
    shownavigation::Bool
end
function Board(name, obj; opts...)
    b = Board(name, obj,
              get(opts, :xlim, [-10.0, 10.0]),
              get(opts, :ylim, [-10.0, 10.0]),
              get(opts, :axis, false),
              get(opts, :showcopyright, false),
              get(opts, :shownavigation, false))
    ks = keys(opts)
    if :boundingbox in keys(opts)
        bb = opts.boundingbox
        @assert length(bb) == 4 "Bounding box must have 4 elements."
        b.xlim = bb[1:2]
        b.ylim = bb[[4,3]]
    end
    return b
end

"""
    board(name="brd"+randstring(3); opts...)

Create a new board.

* `name` - name of the board (generated by default)

## Options
* `xlim` - x axis limits default: `[-10,10]`
* `ylim` - y axis limits default: `[-10,10]`
* `axis` - whether to show the axis ex: false
* `showcopyright` - whether to show JSX's copyright ex: true
* `shownavigation` - whether to show a navigation tool on the board ex: true

Alternative
* `boundingbox` - [xmin,xmax,ymax,ymin]
"""
board(name="brd_"*randstring(3); opts...) = Board(name, Object[]; opts...)

# ---------------------------------------------------------------------------

opts(b::Board) = (
    boundingbox = vcat(b.xlim, reverse(b.ylim)),
    axis = b.axis,
    showcopyright = b.showcopyright,
    shownavigation = b.shownavigation)

"""
    obj |> board
    (obj1, obj2, ...) |> board
    [obj1, obj2, ...] |> board

Add object(s) to board `board`.
"""
(b::Board)(obj::Object) = push!(b.objects, obj)
(b::Board)(obj::Union{Vector{Object},NTuple{N,Object} where N}) =
    append!(b.objects, obj)

# ---------------------------------------------------------------------------

const PREAMBLE =
    "function val(x){return x.Value();};" *
    prod("function $f(x){return Math.$f(x);};"
         for f in (:abs, :acos, :acosh, :asin, :asinh,
                   :atan, :atanh, :ceil, :cos, :cosh, :exp,
                   :expm1, :floor, :hypot, :log, :log1p, :log10,
                   :log2, :max, :min, :round, :sign, :sin, :sinh,
                   :sqrt, :tan, :tanh, :trunc)) *
    "function rand(){return Math.random();};" *
    "const π=Math.PI; const ℯ=Math.E;"

function Base.write(io::IO, b::Board)
    print(io, PREAMBLE)
    b_opts = opts(b)
    jss = js"JXG.JSXGraph.initBoard('jxgbox',$b_opts);"
    print(io, "$(b.name)=" * jss.s)
    for o in b.objects
        print(io, str(o, b))
    end
    return nothing
end
